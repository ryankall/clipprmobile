AI Agent Prompt: Anti-Spam Protection for Booking Requests
🎯 Goal
Implement anti-spam protection for public booking requests using:

Rate limiting per phone number

Barber-level client blocking

✅ Feature 1: Rate Limiting Per Phone Number
Behavior
Limit each phone number to 3 booking requests per 24 hours

If the same number submits a 3rd request within that period:

❌ Reject the request

✅ Return error: "You've reached your daily limit for booking requests. Please try again tomorrow."

This applies to all booking requests submitted through the public booking link.

Backend Requirements
Create a DB table or cache structure to store:

phoneNumber

timestamp

count

Automatically reset the counter every 24 hours per phone number.

API Middleware Example (Pseudocode)
ts
Copy
Edit
if (hasMadeTwoRequestsToday(phoneNumber)) {
  return res.status(429).json({ error: 'Daily booking limit reached.' });
}
Unit Tests
ts
Copy
Edit
describe('Rate Limiting', () => {
  it('allows 3 booking requests per phone number per 24 hours', async () => {
    await sendRequest('555-123-4567');
    await sendRequest('555-123-4567');
    await sendRequest('555-123-4567');
    const res = await sendRequest('555-123-4567');
    expect(res.status).toBe(429);
  });
});
✅ Feature 2: Barber-Controlled Block List
Behavior
Barbers can block a client (based on phone number) from:

Sending booking requests via their public link

Blocked phone numbers receive an error when trying to submit:

"This barber is not accepting bookings from this number."

Admin UI for Barber (Inbox Page)
Add option to block a phone number from any incoming request

Add a “Blocked Clients” tab under Settings → Clients

Allow unblock action

Backend Requirements
New DB table: BlockedClients


{
  barberId: string,
  phoneNumber: string,
  blockedAt: Date
}

Middleware Example

const isBlocked = await db.blockedClients.find({ barberId, phoneNumber });
if (isBlocked) {
  return res.status(403).json({ error: 'This barber is not accepting bookings from this number.' });
}

Unit Tests

describe('Blocked Clients', () => {
  it('blocks booking requests from a blocked number', async () => {
    blockClient('barber123', '555-987-6543');
    const res = await sendBookingRequest('barber123', '555-987-6543');
    expect(res.status).toBe(403);
  });

  it('allows booking after unblock', async () => {
    unblockClient('barber123', '555-987-6543');
    const res = await sendBookingRequest('barber123', '555-987-6543');
    expect(res.status).toBe(200);
  });
});
🧪 Additional Notes
Display a user-friendly error on the public booking form if blocked or rate-limited

Allow admins (or barbers) to view logs of blocked/rate-limited attempts

Make sure blocked numbers can't bypass system via email (phone number is required for booking)

add unit test to make sure this is account isolation this will be per barber account and barber's shared link 